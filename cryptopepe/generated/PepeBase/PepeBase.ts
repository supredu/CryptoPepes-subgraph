// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PepeBorn extends ethereum.Event {
  get params(): PepeBorn__Params {
    return new PepeBorn__Params(this);
  }
}

export class PepeBorn__Params {
  _event: PepeBorn;

  constructor(event: PepeBorn) {
    this._event = event;
  }

  get mother(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get father(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get pepeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PepeNamed extends ethereum.Event {
  get params(): PepeNamed__Params {
    return new PepeNamed__Params(this);
  }
}

export class PepeNamed__Params {
  _event: PepeNamed;

  constructor(event: PepeNamed) {
    this._event = event;
  }

  get pepeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UserNamed extends ethereum.Event {
  get params(): UserNamed__Params {
    return new UserNamed__Params(this);
  }
}

export class UserNamed__Params {
  _event: UserNamed;

  constructor(event: UserNamed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get username(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class PepeBase__getPepeResult {
  value0: Address;
  value1: Array<BigInt>;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Bytes;
  value7: i32;

  constructor(
    value0: Address,
    value1: Array<BigInt>,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Bytes,
    value7: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromFixedBytes(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    return map;
  }

  getMaster(): Address {
    return this.value0;
  }

  getGenotype(): Array<BigInt> {
    return this.value1;
  }

  getCanCozyAgain(): BigInt {
    return this.value2;
  }

  getGeneration(): BigInt {
    return this.value3;
  }

  getFather(): BigInt {
    return this.value4;
  }

  getMother(): BigInt {
    return this.value5;
  }

  getPepeName(): Bytes {
    return this.value6;
  }

  getCoolDownIndex(): i32 {
    return this.value7;
  }
}

export class PepeBase__pepesResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: i32;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }

  getMaster(): Address {
    return this.value0;
  }

  getCanCozyAgain(): BigInt {
    return this.value1;
  }

  getGeneration(): BigInt {
    return this.value2;
  }

  getFather(): BigInt {
    return this.value3;
  }

  getMother(): BigInt {
    return this.value4;
  }

  getCoolDownIndex(): i32 {
    return this.value5;
  }
}

export class PepeBase extends ethereum.SmartContract {
  static bind(address: Address): PepeBase {
    return new PepeBase("PepeBase", address);
  }

  MAX_PREMINE(): BigInt {
    let result = super.call("MAX_PREMINE", "MAX_PREMINE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_PREMINE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_PREMINE", "MAX_PREMINE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_ZERO_GEN_PEPES(): BigInt {
    let result = super.call(
      "MAX_ZERO_GEN_PEPES",
      "MAX_ZERO_GEN_PEPES():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_ZERO_GEN_PEPES(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_ZERO_GEN_PEPES",
      "MAX_ZERO_GEN_PEPES():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  R(): i32 {
    let result = super.call("R", "R():(uint8)", []);

    return result[0].toI32();
  }

  try_R(): ethereum.CallResult<i32> {
    let result = super.tryCall("R", "R():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  addressToUser(param0: Address): Bytes {
    let result = super.call(
      "addressToUser",
      "addressToUser(address):(bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBytes();
  }

  try_addressToUser(param0: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "addressToUser",
      "addressToUser(address):(bytes32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  approved(param0: BigInt): Address {
    let result = super.call("approved", "approved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_approved(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("approved", "approved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  approvedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "approvedForAll",
      "approvedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_approvedForAll(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedForAll",
      "approvedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balances(param0: Address): BigInt {
    let result = super.call("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cozyCoolDowns(param0: BigInt): BigInt {
    let result = super.call(
      "cozyCoolDowns",
      "cozyCoolDowns(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_cozyCoolDowns(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cozyCoolDowns",
      "cozyCoolDowns(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cozyTime(_mother: BigInt, _father: BigInt, _pepeReceiver: Address): boolean {
    let result = super.call(
      "cozyTime",
      "cozyTime(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_mother),
        ethereum.Value.fromUnsignedBigInt(_father),
        ethereum.Value.fromAddress(_pepeReceiver)
      ]
    );

    return result[0].toBoolean();
  }

  try_cozyTime(
    _mother: BigInt,
    _father: BigInt,
    _pepeReceiver: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "cozyTime",
      "cozyTime(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_mother),
        ethereum.Value.fromUnsignedBigInt(_father),
        ethereum.Value.fromAddress(_pepeReceiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(_tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCozyAgain(_pepeId: BigInt): BigInt {
    let result = super.call("getCozyAgain", "getCozyAgain(uint256):(uint64)", [
      ethereum.Value.fromUnsignedBigInt(_pepeId)
    ]);

    return result[0].toBigInt();
  }

  try_getCozyAgain(_pepeId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCozyAgain",
      "getCozyAgain(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(_pepeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPepe(_pepeId: BigInt): PepeBase__getPepeResult {
    let result = super.call(
      "getPepe",
      "getPepe(uint256):(address,uint256[2],uint64,uint64,uint256,uint256,bytes32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(_pepeId)]
    );

    return new PepeBase__getPepeResult(
      result[0].toAddress(),
      result[1].toBigIntArray(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBytes(),
      result[7].toI32()
    );
  }

  try_getPepe(_pepeId: BigInt): ethereum.CallResult<PepeBase__getPepeResult> {
    let result = super.tryCall(
      "getPepe",
      "getPepe(uint256):(address,uint256[2],uint64,uint64,uint256,uint256,bytes32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(_pepeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PepeBase__getPepeResult(
        value[0].toAddress(),
        value[1].toBigIntArray(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBytes(),
        value[7].toI32()
      )
    );
  }

  haltDuration(): BigInt {
    let result = super.call("haltDuration", "haltDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_haltDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("haltDuration", "haltDuration():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  haltTime(): BigInt {
    let result = super.call("haltTime", "haltTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_haltTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("haltTime", "haltTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  halted(): boolean {
    let result = super.call("halted", "halted():(bool)", []);

    return result[0].toBoolean();
  }

  try_halted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("halted", "halted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  implementsERC721(): boolean {
    let result = super.call(
      "implementsERC721",
      "implementsERC721():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_implementsERC721(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "implementsERC721",
      "implementsERC721():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxHaltDuration(): BigInt {
    let result = super.call(
      "maxHaltDuration",
      "maxHaltDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxHaltDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxHaltDuration",
      "maxHaltDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minePepe(_seed: BigInt, _receiver: Address): BigInt {
    let result = super.call("minePepe", "minePepe(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_seed),
      ethereum.Value.fromAddress(_receiver)
    ]);

    return result[0].toBigInt();
  }

  try_minePepe(_seed: BigInt, _receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minePepe",
      "minePepe(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_seed),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  miner(): Address {
    let result = super.call("miner", "miner():(address)", []);

    return result[0].toAddress();
  }

  try_miner(): ethereum.CallResult<Address> {
    let result = super.tryCall("miner", "miner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(_tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pepeNames(param0: BigInt): Bytes {
    let result = super.call("pepeNames", "pepeNames(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_pepeNames(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("pepeNames", "pepeNames(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  pepes(param0: BigInt): PepeBase__pepesResult {
    let result = super.call(
      "pepes",
      "pepes(uint256):(address,uint64,uint64,uint64,uint64,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PepeBase__pepesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toI32()
    );
  }

  try_pepes(param0: BigInt): ethereum.CallResult<PepeBase__pepesResult> {
    let result = super.tryCall(
      "pepes",
      "pepes(uint256):(address,uint64,uint64,uint64,uint64,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PepeBase__pepesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toI32()
      )
    );
  }

  setPepeName(_pepeId: BigInt, _name: Bytes): boolean {
    let result = super.call(
      "setPepeName",
      "setPepeName(uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_pepeId),
        ethereum.Value.fromFixedBytes(_name)
      ]
    );

    return result[0].toBoolean();
  }

  try_setPepeName(_pepeId: BigInt, _name: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setPepeName",
      "setPepeName(uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_pepeId),
        ethereum.Value.fromFixedBytes(_name)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceID: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenOfOwnerByIndex(_owner: Address, _index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    _owner: Address,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(_to: Address, _tokenId: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(_from: Address, _to: Address, _tokenId: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userToAddress(param0: Bytes): Address {
    let result = super.call(
      "userToAddress",
      "userToAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_userToAddress(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "userToAddress",
      "userToAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  zeroGenPepes(): BigInt {
    let result = super.call("zeroGenPepes", "zeroGenPepes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_zeroGenPepes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("zeroGenPepes", "zeroGenPepes():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ClaimUsernameCall extends ethereum.Call {
  get inputs(): ClaimUsernameCall__Inputs {
    return new ClaimUsernameCall__Inputs(this);
  }

  get outputs(): ClaimUsernameCall__Outputs {
    return new ClaimUsernameCall__Outputs(this);
  }
}

export class ClaimUsernameCall__Inputs {
  _call: ClaimUsernameCall;

  constructor(call: ClaimUsernameCall) {
    this._call = call;
  }

  get _username(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ClaimUsernameCall__Outputs {
  _call: ClaimUsernameCall;

  constructor(call: ClaimUsernameCall) {
    this._call = call;
  }
}

export class CozyTimeCall extends ethereum.Call {
  get inputs(): CozyTimeCall__Inputs {
    return new CozyTimeCall__Inputs(this);
  }

  get outputs(): CozyTimeCall__Outputs {
    return new CozyTimeCall__Outputs(this);
  }
}

export class CozyTimeCall__Inputs {
  _call: CozyTimeCall;

  constructor(call: CozyTimeCall) {
    this._call = call;
  }

  get _mother(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _father(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _pepeReceiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CozyTimeCall__Outputs {
  _call: CozyTimeCall;

  constructor(call: CozyTimeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class HaltCall extends ethereum.Call {
  get inputs(): HaltCall__Inputs {
    return new HaltCall__Inputs(this);
  }

  get outputs(): HaltCall__Outputs {
    return new HaltCall__Outputs(this);
  }
}

export class HaltCall__Inputs {
  _call: HaltCall;

  constructor(call: HaltCall) {
    this._call = call;
  }

  get _duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class HaltCall__Outputs {
  _call: HaltCall;

  constructor(call: HaltCall) {
    this._call = call;
  }
}

export class MinePepeCall extends ethereum.Call {
  get inputs(): MinePepeCall__Inputs {
    return new MinePepeCall__Inputs(this);
  }

  get outputs(): MinePepeCall__Outputs {
    return new MinePepeCall__Outputs(this);
  }
}

export class MinePepeCall__Inputs {
  _call: MinePepeCall;

  constructor(call: MinePepeCall) {
    this._call = call;
  }

  get _seed(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MinePepeCall__Outputs {
  _call: MinePepeCall;

  constructor(call: MinePepeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PepePremineCall extends ethereum.Call {
  get inputs(): PepePremineCall__Inputs {
    return new PepePremineCall__Inputs(this);
  }

  get outputs(): PepePremineCall__Outputs {
    return new PepePremineCall__Outputs(this);
  }
}

export class PepePremineCall__Inputs {
  _call: PepePremineCall;

  constructor(call: PepePremineCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PepePremineCall__Outputs {
  _call: PepePremineCall;

  constructor(call: PepePremineCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetMinerCall extends ethereum.Call {
  get inputs(): SetMinerCall__Inputs {
    return new SetMinerCall__Inputs(this);
  }

  get outputs(): SetMinerCall__Outputs {
    return new SetMinerCall__Outputs(this);
  }
}

export class SetMinerCall__Inputs {
  _call: SetMinerCall;

  constructor(call: SetMinerCall) {
    this._call = call;
  }

  get _miner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMinerCall__Outputs {
  _call: SetMinerCall;

  constructor(call: SetMinerCall) {
    this._call = call;
  }
}

export class SetPepeNameCall extends ethereum.Call {
  get inputs(): SetPepeNameCall__Inputs {
    return new SetPepeNameCall__Inputs(this);
  }

  get outputs(): SetPepeNameCall__Outputs {
    return new SetPepeNameCall__Outputs(this);
  }
}

export class SetPepeNameCall__Inputs {
  _call: SetPepeNameCall;

  constructor(call: SetPepeNameCall) {
    this._call = call;
  }

  get _pepeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _name(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetPepeNameCall__Outputs {
  _call: SetPepeNameCall;

  constructor(call: SetPepeNameCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnhaltCall extends ethereum.Call {
  get inputs(): UnhaltCall__Inputs {
    return new UnhaltCall__Inputs(this);
  }

  get outputs(): UnhaltCall__Outputs {
    return new UnhaltCall__Outputs(this);
  }
}

export class UnhaltCall__Inputs {
  _call: UnhaltCall;

  constructor(call: UnhaltCall) {
    this._call = call;
  }
}

export class UnhaltCall__Outputs {
  _call: UnhaltCall;

  constructor(call: UnhaltCall) {
    this._call = call;
  }
}
