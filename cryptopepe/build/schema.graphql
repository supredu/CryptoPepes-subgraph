type User @entity{
  id: ID! #account
  username: String
  holdings: [Pepe!] @derivedfrom(field: "owner")
}
type Pepe @entity{
  id: ID!
  owner: User!
  mother: Pepe!
  father: Pepe!
  uri: String!
  previousOwner: User!
  tokenId: BigInt!
  metadata: PepeMetadata
  blockNumber: BigInt!
  isWrapped: Wrapped
  removed: BigInt #blocknumber
}
enum Wrapped{
    Wrapped
    UnWrapped
}
type PepeMetadata @entity {
  id: ID! # IPFS URI
  image: String!
  externalURL: String!
  animationURL: String!
  name: String!
  description: String!
  attributes: [Attribute!] @derivedfrom(field: "metadata")
}

type Attribute @entity {
  id: ID! # PepeMetadataID-TraitIndex
  traitType: String!
  value: String!
  metadata: PepeMetadata!
}

interface Transaction @entity(immutable: true){
  id: ID!
  sender: Bytes! # address
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}
type Mint implements Transaction @entity{
  id: Bytes! #txHash
  receiver: User!
  timestamp: BigInt!
  blockNumber: BigInt!
  pepe: Pepe!
}

type Burn implements Transaction @entity {
  id: Bytes! #txHash
  timestamp: BigInt!
  blockNumber: BigInt!
  sender: User!
  pepe: Pepe!
}
type Transfer implements Transaction @entity  {
  id: Bytes! #txHash
  timestamp: BigInt!
  blockNumber: BigInt!
  receiver: User!
  sender: User!
  pepe: Pepe!
}
type Wrap implements Transaction @entity{
  id: Bytes! #txHash
  sender: User! # address
  pepe: Pepe!
  blockNumber: BigInt!
  timestamp: BigInt!
}
type Unwrap implements Transaction @entity{
  id: Bytes! #txHash
  sender: User! # address
  receiver: User! # address
  pepe: Pepe!
  blockNumber: BigInt!
  timestamp: BigInt!
}
type BatchWrap implements Transaction @entity{
  id: Bytes! #txHash
  sender: User! # address
  pepes: [Pepe!]!
  blockNumber: BigInt!
  timestamp: BigInt!
}